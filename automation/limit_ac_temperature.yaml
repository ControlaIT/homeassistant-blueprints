blueprint:
  name: AC limit temperature
  description: "Triggers actions when temperature crosses thresholds with optional AC control counting"
  domain: automation
  input:
    temperature_sensor:
      name: Temperature Sensor
      description: "The sensor to monitor for temperature changes"
      selector:
        entity:
          filter:
           - domain: sensor
             device_class: temperature
    below_threshold:
      name: Below Threshold
      description: "Temperature below which to trigger (optional)"
      default: 100
      selector:
        number:
          min: 16
          max: 32
          step: 0.5
          unit_of_measurement: °C
    above_threshold:
      name: Above Threshold
      description: "Temperature above which to trigger (optional)"
      default: 0
      selector:
        number:
          min: 16
          max: 32
          step: 0.5
          unit_of_measurement: °C
    ac_limited_counter:
      name: AC Limited Counter
      description: "Counter to increment when AC is on during trigger (optional)"
      default: ""
      selector:
        entity:
          filter:
            - domain: counter

    ac_running_sensor:
      name: A/C Running Sensor
      description: "Binary sensor that is 'on' while the A/C is actively running"
      selector:
        entity:
          filter:
            - domain: binary_sensor
              device_class: running
            - domain: binary_sensor
              device_class: power
          multiple: false

    actions:
      name: Actions to perform
      description: "Actions to execute when threshold is crossed"
      selector:
        action:

variables:
  temperature_sensor: !input temperature_sensor
  below_th: !input below_threshold
  above_th: !input above_threshold
  counter: !input ac_limited_counter
  ac_running: !input ac_running_sensor

triggers:
  - trigger: numeric_state
    entity_id: !input temperature_sensor
    below: !input below_threshold
    above: !input above_threshold
  - trigger: state
    entity_id: !input ac_running_sensor
    from: "off"
    to: "on"
    for: "00:00:05"

# Only run if the provided A/C running sensor is either blank or reporting 'on'.
condition:
  - condition: template
    value_template: "{{ is_state(ac_running, 'on') }}"
  - condition: template
    value_template: "{{ ((states(temperature_sensor) | float) < below_th) or ((states(temperature_sensor) | float) > above_th) }}"


action:
  - if:         
    - condition: template
      value_template: "{{ counter != '' }}"
    then:
      - action: counter.increment
        target:
          entity_id: "{{ counter }}"
  - sequence: !input actions

mode: single
